"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Logger=void 0;const safe_1=__importDefault(require("@colors/colors/safe")),winston_1=require("winston"),winston_daily_rotate_file_1=__importDefault(require("winston-daily-rotate-file")),{combine:combine,timestamp:timestamp,printf:printf}=winston_1.format,pteroConsoleFormat=()=>printf((({message:e,timestamp:r,level:t,lvlOver:a})=>{let o="";switch(t=a||t){case"cmd":o+=`${safe_1.default.bgWhite("CMD")}`;break;case"warn":o+=`${safe_1.default.bgYellow("WARN")}`;break;case"error":o+=`${safe_1.default.bgRed("ERROR")}`;break;case"log":o+=`${safe_1.default.bgBlue("LOG")}`;break;case"ready":o+=`${safe_1.default.bgGreen("READY")}`}return`[${r}] ${o} ${e}`})),pteroFileFormat=()=>printf((({message:e,timestamp:r,level:t,lvlOver:a})=>`${a??t}: [${r}] ${e}`));class Logger{constructor(){this.logging=(0,winston_1.createLogger)({exitOnError:!1,format:combine(timestamp({format:"YYYY-MM-DD HH:mm:ss"})),transports:[new winston_1.transports.Console({format:printf((({message:e,timestamp:r,level:t,lvlOver:a})=>{let o="";switch(t=a||t){case"cmd":o+=`${safe_1.default.bgWhite("CMD")}`;break;case"warn":o+=`${safe_1.default.bgYellow("WARN")}`;break;case"error":o+=`${safe_1.default.bgRed("ERROR")}`;break;case"log":o+=`${safe_1.default.bgBlue("LOG")}`;break;case"ready":o+=`${safe_1.default.bgGreen("READY")}`}return`[${r}] ${o} ${e}`}))}),new winston_daily_rotate_file_1.default({dirname:"logs",maxFiles:"30d",maxSize:"50m",filename:"pteranodon-%DATE%.log",format:printf((({message:e,timestamp:r,level:t,lvlOver:a})=>`${a??t}: [${r}] ${e}`))})]})}logger(e,r){switch(r){case"log":return this.logging.info(e,{lvlOver:"log"});case"warn":return this.logging.log("warn",e);case"error":return this.logging.log("error",e);case"cmd":return this.logging.info(e,{lvlOver:"cmd"});case"ready":return this.logging.info(e,{lvlOver:"ready"});default:throw new TypeError("Logger type must be either warn, debug, log, ready, cmd or error.")}}log(e){this.logger(e,"log")}error(e){this.logger(e,"error")}warn(e){this.logger(e,"warn")}cmd(e){this.logger(e,"cmd")}ready(e){this.logger(e,"ready")}}exports.Logger=Logger;